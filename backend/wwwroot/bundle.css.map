{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\src\\App.svelte",
    "..\\src\\RacingApp.svelte",
    "..\\src\\PracticePad.svelte",
    "..\\src\\UserStats.svelte",
    "..\\src\\TargetText.svelte",
    "..\\src\\ProgressBar.svelte"
  ],
  "sourcesContent": [
    "<style>\n\n.main {\n\tbackground-color: rgb(255, 255, 233);\n\tmax-width: 500px;\n\tmargin: 10px auto;\n\tpadding: 1em;\n}\n\na {\n\tmargin-right: 1em;\n}\n</style>\n\n<script>\n\timport PracticePad from './PracticePad.svelte';\n\t\t\n\tconst problemSets = [\n\t\t{\n\t\t\tname: \"Text\",\n\t\t\tproblems: [\n\t\t\t\t\"What a wonderful world!\", \n\t\t\t\t\"What is this, magic?\",\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tname: \"Code\",\n\t\t\tproblems: [\n\t\t\t\t`function(x) { return x; }`, \n\t\t\t\t`() => { return \"Hello, world!\"; }`,\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tname: \"Numbers & Symbols\",\n\t\t\tproblems: [\n\t\t\t\t`1820 3949 0695 8231`, \n\t\t\t\t`%*@! <(}! >?|) *@)# []&* =~-\\\\ /.$\\{`,\n\t\t\t],\n\t\t},\n\t];\n\n\tlet currentProblemSet = problemSets[0];\n\tlet practicePad;\n\n\tfunction handleClick(e, problemIndex) {\n\t\tpracticePad.setProblemIndex(0);\n\t\tcurrentProblemSet = problemSets[problemIndex];\n\t\te.preventDefault();\n\t}\n</script>\n\n<div class=\"main\">\n\t<h2>Welcome to TypeDojo</h2>\n\t<div>\n\t\t{#each problemSets as problemSet, i}\n\t\t<a href=\"#{problemSet.name}\" on:click={ e => handleClick(e, i) }>{problemSet.name}</a>\n\t\t{/each}\n\t</div>\n\t<div>Type the text below into the text field.</div>\n\t<hr>\n\t<PracticePad bind:this={practicePad} problemSet={currentProblemSet} />\n</div>\n",
    "<style>\n\n.main {\n\tbackground-color: rgb(255, 255, 233);\n\tmax-width: 500px;\n\tmargin: 10px auto;\n\tpadding: 1em;\n}\n\na {\n\tmargin-right: 1em;\n}\n\n</style>\n\n<script>\n\timport PracticePad from './PracticePad.svelte';\n\timport UserStats from './UserStats.svelte';\n\timport { currentUsers, nameService } from './stores.js';\n\n\n\texport let racingGroup = \"defaultRaceGroup\";\n\texport let signalrConnection;\n\texport let myId = \"\";\n\t\t\n\tconst problemSets = [\n\t\t{\n\t\t\tname: \"Text\",\n\t\t\tproblems: [\n\t\t\t\t\"What a wonderful world! A world where you can type and type as you wonder: What does it all mean? Let the letters flow through your fingertips, your fingers like little spiders on the keyboard.\", \n\t\t\t\t\"What is this, magic? That is the question everyone is asking themselves, is it really magic or is it just a little bit of good luck and some SignalR?\",\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tname: \"Code\",\n\t\t\tproblems: [\n\t\t\t\t`function(x) { return x; }`, \n\t\t\t\t`() => { return \"Hello, world!\"; }`,\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tname: \"Numbers & Symbols\",\n\t\t\tproblems: [\n\t\t\t\t`1820 3949 0695 8231`, \n\t\t\t\t`%*@! <(}! >?|) *@)# []&* =~-\\\\ /.$\\{`,\n\t\t\t],\n\t\t},\n\t];\n\n\tlet currentProblemSet = problemSets[0];\n\tlet practicePad;\n\tconst joinRaceGroup = signalrConnection().then(connection => connection.invoke(\"joinGroup\", racingGroup, $nameService[myId] ? $nameService[myId] : \"\"));\n\n\tfunction handleClick(e, problemIndex) {\n\t\tpracticePad.setProblemIndex(0);\n\t\tcurrentProblemSet = problemSets[problemIndex];\n\t\te.preventDefault();\n\t}\n\n\tfunction progressHandler(progress){\n\t\tsignalrConnection().then(connection => connection.invoke(\"Progress\", racingGroup, progress));\n\t}\n</script>\n\n<div class=\"main\">\n\t<h2>üèçÔ∏è Welcome to Racing in TypeDojo</h2>\n\n\t{#await joinRaceGroup}\n\t\t<p>...connecting to racing group</p>\n\t{:then joined}\n\t\t<div>Type the text below into the text field.</div>\n\t\t<hr>\n\t\t<PracticePad bind:this={practicePad} onprogress={progressHandler} problemSet={currentProblemSet} />\n\t{:catch error}\n\t\t<p style=\"color: red\">Error joining racing group {error.message}</p>\n\t{/await}\n\n\t<hr>\n\t<div>\n\t\tConnected users:\n\t\t{#each Object.keys($currentUsers) as userKey}\n\t\t\t<UserStats isme={userKey===myId} user={$currentUsers[userKey]} />\n\t\t{/each}\n\t</div>\n\n</div>\n",
    "<style>\n\t.complete {\n\t\tcolor: rgb(0, 94, 0);\n\t\tfont-weight: bold;\n\t}\n\t\n\tinput {\n\t\twidth: 100%;\n\t}\n</style>\n\n<script>\n\timport TargetText from './TargetText.svelte'\n\t\n\texport let problemSet = {\n\t\tname: \"Example set\",\n\t\tproblems: [\"Example text to write!\"],\n\t};\n\n\texport let onprogress = () => {};\n\n\texport let setProblemIndex = function(index) {\n\t\tcurrentProblemIndex = index;\n\t}\n\t\n\tlet debug = false;\n\n\tlet currentProblemIndex = 0;\n\t\n\tlet currentProblem = problemSet.problems[currentProblemIndex];\n\tlet\tremainingText = currentProblem;\n\tlet confirmedText = \"\";\n\tlet pendingText = \"\";\n\n\t$: {\n\t\tcurrentProblem = problemSet.problems[currentProblemIndex];\n\t\tremainingText = currentProblem;\n\t\tconfirmedText = \"\";\n\t\tpendingText = \"\";\n\t}\t\n\t$: writtenText = `${confirmedText}${pendingText}`;\n\t$: setCompleted = (currentProblemIndex === problemSet.problems.length-1) && remainingText === \"\";\n\t\n\tfunction handleInput(e){\n\t\tconst pendingAndRemainingMatch = pendingText === remainingText;\n\t\tif (e.data === \" \" || pendingAndRemainingMatch) {\n\t\t\tconst wordCorrect = pendingAndRemainingMatch || (pendingText === remainingText.substring(0, pendingText.length));\n\t\t\tif (wordCorrect) {\n\t\t\t\tremainingText = remainingText.slice(pendingText.length);\n\t\t\t  confirmedText = `${confirmedText}${pendingText}`;\n\t\t\t  pendingText = \"\";\n\t\t\t  onprogress(confirmedText.length / currentProblem.length);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfunction handleKeyUp(e) {\n\t\tif (e.code === \"Enter\" && remainingText === \"\") {\n\t\t\tgenerateNewProblem();\n\t\t}\n\t}\n\n\t\n\tfunction generateNewProblem() {\n\t\tconsole.log(setCompleted, currentProblemIndex, problemSet.problems.length-1);\n\t\t\n\t\tif(!setCompleted){\n\t\t\tcurrentProblemIndex += 1;\n\t\t}\n\t}\n</script>\n\n{#if setCompleted}\n\t<strong>Congratulations, you finished the problem set!</strong>\n{:else}\n\t<TargetText textToWrite={currentProblem} writtenText={writtenText} />\n\t<br />\n\t<input \n\t\tautofocus\n\t\ttype=text \n\t\tplaceholder={confirmedText === \"\" ? `${currentProblem.slice(0,10)}...` : \"\" } \n\t\ton:input={handleInput} \n\t\ton:keyup={handleKeyUp} \n\t\tbind:value={pendingText}/>\n\t<div>\n\t\t{#if remainingText === \"\"}\n\t\t\t<div class=\"complete\" >Complete! Hit Return &crarr; for another challenge!</div>\n\t\t{/if}\n\t\t{#if debug}\n\t\t<div>remainingText: \"{remainingText}\"</div>\n\t\t<div>writtenText: \"{writtenText}\"</div>\n\t\t<div>confirmedText: \"{confirmedText}\"</div>\n\t\t<div>pendingText: \"{pendingText}\"</div>\n\t\t<div>currentProblem: \"{currentProblem}\"</div>\n\t\t{/if}\n\t</div>\n{/if}\n",
    "<style>\r\n.me {\r\n\tfont-weight: bold;\r\n}\r\n\r\ndiv {\r\n    width: 100%;\r\n}\r\n\r\n</style>\r\n\r\n\r\n<script>\r\n    import ProgressBar from './ProgressBar.svelte';\r\n\timport { nameService } from './stores.js';\r\n    export let user = {};\r\n    export let isme = false;\r\n\r\n\r\n    function leftPad(s, length) {\r\n        return (s.length < length ? Array(length - s.length).join(\" \") : \"\") + s;\r\n    }\r\n\r\n</script>\r\n\r\n\r\n<div class:me={isme}>\r\n    {$nameService[user.id] ? $nameService[user.id] : user.id} {leftPad((user.progress*100).toFixed(1), 5)}%\r\n    <ProgressBar progress={user.progress} />\r\n</div>\r\n",
    "<style>\n\t.correct {\n\t\tcolor: #27c0278a;\n\t}\n\t.incorrect {\n\t\tcolor: red;\n\t\tborder: 1px solid grey;\n\t}\n\t\n\tspan {\n\t\tfont-family: monospace, monospace;\n\t}\n</style>\n\n<script>\n\texport let textToWrite = \"Populate the textToWrite prop to insert your own text to write!\";\n\texport let writtenText = \"\";\n\texport let debug = false;\n\t\n\tfunction computeMatchingPrefix(writtenText, textToWrite) {\n\t\tfor (let i=writtenText.length; i>0; i--) {\n\t\t\tlet p1 = writtenText.slice(0, i);\n\t\t\tlet p2 = textToWrite.slice(0, i);\t\n\t\t\tif (p1 === p2) {\n\t\t\t\treturn p1;\n\t\t\t}\n\t\t}\n\t\treturn \"\";\n\t}\n\t\n\t$: matchingPrefix = computeMatchingPrefix(writtenText, textToWrite);\n\t$: numberOfErrors = writtenText.length - matchingPrefix.length;\n\t$: errorPart = textToWrite.slice(matchingPrefix.length, matchingPrefix.length+numberOfErrors);\n\t$: remainingPart = textToWrite.slice(matchingPrefix.length+numberOfErrors);\n</script>\n\n<div>\n\t<span class=\"correct\">{matchingPrefix}</span><span class=\"incorrect\">{errorPart}</span><span>{remainingPart}</span>\n</div>\n{#if debug}\n<div>\n\tWrittenText: <span>\"{writtenText}\"</span>\n</div>\n<div>\n\tMatching Prefix: <span>\"{matchingPrefix}\"</span>\n</div>\n<div>\n\tRest: <span>\"{textToWrite.slice(matchingPrefix.length)}\"</span>\n</div>\n<div>\n\tWrong letters: <span>\"{writtenText.slice(matchingPrefix.length)}\"</span>\n</div>\n<div>\n\tno errors: <span>\"{numberOfErrors}\"</span>\n</div>\n{/if}",
    "<style>\r\n\r\ndiv {\r\n    width: 100%;\r\n    height: 1em;\r\n    border: 1px solid rgb(58, 62, 68);\r\n    background-color: rgba(132, 132, 187, 0.116);\r\n}\r\n\r\nspan{\r\n    height: 100%;\r\n    display: block;\r\n}\r\n\r\n.completed {\r\n    background-color: rgb(140, 140, 187);\r\n}\r\n\r\n</style>\r\n\r\n\r\n<script>\r\n    export let progress = 0;\r\n</script>\r\n\r\n\r\n<div >\r\n    <span class=\"completed\" style=\"width: {Math.floor(progress * 100) }%\"></span>\r\n</div>\r\n"
  ],
  "names": [],
  "mappings": "AAEA,KAAK,eAAC,CAAC,AACN,gBAAgB,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CACpC,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,IAAI,CAAC,IAAI,CACjB,OAAO,CAAE,GAAG,AACb,CAAC,AAED,CAAC,eAAC,CAAC,AACF,YAAY,CAAE,GAAG,AAClB,CAAC;ACTD,KAAK,cAAC,CAAC,AACN,gBAAgB,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CACpC,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,IAAI,CAAC,IAAI,CACjB,OAAO,CAAE,GAAG,AACb,CAAC;ACNA,SAAS,eAAC,CAAC,AACV,KAAK,CAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CACpB,WAAW,CAAE,IAAI,AAClB,CAAC,AAED,KAAK,eAAC,CAAC,AACN,KAAK,CAAE,IAAI,AACZ,CAAC;ACPF,GAAG,eAAC,CAAC,AACJ,WAAW,CAAE,IAAI,AAClB,CAAC,AAED,GAAG,eAAC,CAAC,AACD,KAAK,CAAE,IAAI,AACf,CAAC;ACNA,QAAQ,cAAC,CAAC,AACT,KAAK,CAAE,SAAS,AACjB,CAAC,AACD,UAAU,cAAC,CAAC,AACX,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,AACvB,CAAC,AAED,IAAI,cAAC,CAAC,AACL,WAAW,CAAE,SAAS,CAAC,CAAC,SAAS,AAClC,CAAC;ACTF,GAAG,cAAC,CAAC,AACD,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,GAAG,CACX,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CACjC,gBAAgB,CAAE,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,AAChD,CAAC,AAED,kBAAI,CAAC,AACD,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,KAAK,AAClB,CAAC,AAED,UAAU,cAAC,CAAC,AACR,gBAAgB,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AACxC,CAAC"
}